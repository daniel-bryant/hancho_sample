// Code generated by protoc-gen-go. DO NOT EDIT.
// source: math.proto

package math

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IntPair struct {
	FirstValue           int32    `protobuf:"varint,1,opt,name=first_value,json=firstValue,proto3" json:"first_value,omitempty"`
	SecondValue          int32    `protobuf:"varint,2,opt,name=second_value,json=secondValue,proto3" json:"second_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntPair) Reset()         { *m = IntPair{} }
func (m *IntPair) String() string { return proto.CompactTextString(m) }
func (*IntPair) ProtoMessage()    {}
func (*IntPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_math_3e8f1ec649950f67, []int{0}
}
func (m *IntPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntPair.Unmarshal(m, b)
}
func (m *IntPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntPair.Marshal(b, m, deterministic)
}
func (dst *IntPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntPair.Merge(dst, src)
}
func (m *IntPair) XXX_Size() int {
	return xxx_messageInfo_IntPair.Size(m)
}
func (m *IntPair) XXX_DiscardUnknown() {
	xxx_messageInfo_IntPair.DiscardUnknown(m)
}

var xxx_messageInfo_IntPair proto.InternalMessageInfo

func (m *IntPair) GetFirstValue() int32 {
	if m != nil {
		return m.FirstValue
	}
	return 0
}

func (m *IntPair) GetSecondValue() int32 {
	if m != nil {
		return m.SecondValue
	}
	return 0
}

type Int struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Int) Reset()         { *m = Int{} }
func (m *Int) String() string { return proto.CompactTextString(m) }
func (*Int) ProtoMessage()    {}
func (*Int) Descriptor() ([]byte, []int) {
	return fileDescriptor_math_3e8f1ec649950f67, []int{1}
}
func (m *Int) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Int.Unmarshal(m, b)
}
func (m *Int) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Int.Marshal(b, m, deterministic)
}
func (dst *Int) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int.Merge(dst, src)
}
func (m *Int) XXX_Size() int {
	return xxx_messageInfo_Int.Size(m)
}
func (m *Int) XXX_DiscardUnknown() {
	xxx_messageInfo_Int.DiscardUnknown(m)
}

var xxx_messageInfo_Int proto.InternalMessageInfo

func (m *Int) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*IntPair)(nil), "math.IntPair")
	proto.RegisterType((*Int)(nil), "math.Int")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MathClient is the client API for Math service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MathClient interface {
	Add(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*Int, error)
}

type mathClient struct {
	cc *grpc.ClientConn
}

func NewMathClient(cc *grpc.ClientConn) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Add(ctx context.Context, in *IntPair, opts ...grpc.CallOption) (*Int, error) {
	out := new(Int)
	err := c.cc.Invoke(ctx, "/math.Math/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathServer is the server API for Math service.
type MathServer interface {
	Add(context.Context, *IntPair) (*Int, error)
}

func RegisterMathServer(s *grpc.Server, srv MathServer) {
	s.RegisterService(&_Math_serviceDesc, srv)
}

func _Math_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math.Math/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Add(ctx, req.(*IntPair))
	}
	return interceptor(ctx, in, info, handler)
}

var _Math_serviceDesc = grpc.ServiceDesc{
	ServiceName: "math.Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Math_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "math.proto",
}

func init() { proto.RegisterFile("math.proto", fileDescriptor_math_3e8f1ec649950f67) }

var fileDescriptor_math_3e8f1ec649950f67 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x4d, 0x2c, 0xc9,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x7c, 0xb9, 0xd8, 0x3d, 0xf3,
	0x4a, 0x02, 0x12, 0x33, 0x8b, 0x84, 0xe4, 0xb9, 0xb8, 0xd3, 0x32, 0x8b, 0x8a, 0x4b, 0xe2, 0xcb,
	0x12, 0x73, 0x4a, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0xb8, 0xc0, 0x42, 0x61, 0x20,
	0x11, 0x21, 0x45, 0x2e, 0x9e, 0xe2, 0xd4, 0xe4, 0xfc, 0xbc, 0x14, 0xa8, 0x0a, 0x26, 0xb0, 0x0a,
	0x6e, 0x88, 0x18, 0x58, 0x89, 0x92, 0x34, 0x17, 0xb3, 0x67, 0x5e, 0x89, 0x90, 0x08, 0x17, 0x2b,
	0xb2, 0x21, 0x10, 0x8e, 0x91, 0x26, 0x17, 0x8b, 0x6f, 0x62, 0x49, 0x86, 0x90, 0x22, 0x17, 0xb3,
	0x63, 0x4a, 0x8a, 0x10, 0xaf, 0x1e, 0xd8, 0x35, 0x50, 0xeb, 0xa5, 0x38, 0xe1, 0x5c, 0x25, 0x86,
	0x24, 0x36, 0xb0, 0x1b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x22, 0x30, 0x04, 0xb1,
	0x00, 0x00, 0x00,
}
